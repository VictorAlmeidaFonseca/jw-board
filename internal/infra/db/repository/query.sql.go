// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"
)

const deletePersonRole = `-- name: DeletePersonRole :exec
DELETE FROM person_role WHERE id = ?
`

func (q *Queries) DeletePersonRole(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePersonRole, id)
	return err
}

const getAllPersonRoles = `-- name: GetAllPersonRoles :many
SELECT id, person_id, role_id, "foreign" FROM person_role
`

func (q *Queries) GetAllPersonRoles(ctx context.Context) ([]*PersonRole, error) {
	rows, err := q.db.QueryContext(ctx, getAllPersonRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*PersonRole
	for rows.Next() {
		var i PersonRole
		if err := rows.Scan(
			&i.ID,
			&i.PersonID,
			&i.RoleID,
			&i.Foreign,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPersonRoleByID = `-- name: GetPersonRoleByID :one
SELECT id, person_id, role_id, "foreign" FROM person_role WHERE id = ?
`

// Person PersonRole
func (q *Queries) GetPersonRoleByID(ctx context.Context, id int64) (*PersonRole, error) {
	row := q.db.QueryRowContext(ctx, getPersonRoleByID, id)
	var i PersonRole
	err := row.Scan(
		&i.ID,
		&i.PersonID,
		&i.RoleID,
		&i.Foreign,
	)
	return &i, err
}

const insertPersonRole = `-- name: InsertPersonRole :exec
INSERT INTO person_role (id, person_id, role_id) VALUES (?, ?, ?)
`

type InsertPersonRoleParams struct {
	ID       int64         `json:"id"`
	PersonID sql.NullInt64 `json:"personId"`
	RoleID   sql.NullInt64 `json:"roleId"`
}

func (q *Queries) InsertPersonRole(ctx context.Context, arg InsertPersonRoleParams) error {
	_, err := q.db.ExecContext(ctx, insertPersonRole, arg.ID, arg.PersonID, arg.RoleID)
	return err
}

const updatePersonRole = `-- name: UpdatePersonRole :exec
UPDATE person_role SET person_id = ?, role_id = ? WHERE id = ?
`

type UpdatePersonRoleParams struct {
	PersonID sql.NullInt64 `json:"personId"`
	RoleID   sql.NullInt64 `json:"roleId"`
	ID       int64         `json:"id"`
}

func (q *Queries) UpdatePersonRole(ctx context.Context, arg UpdatePersonRoleParams) error {
	_, err := q.db.ExecContext(ctx, updatePersonRole, arg.PersonID, arg.RoleID, arg.ID)
	return err
}
