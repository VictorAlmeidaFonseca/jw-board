// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package repository

import (
	"context"
)

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles WHERE id = ?
`

func (q *Queries) DeleteRole(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRole, id)
	return err
}

const getAllRoles = `-- name: GetAllRoles :many
SELECT id, description FROM roles
`

func (q *Queries) GetAllRoles(ctx context.Context) ([]*Role, error) {
	rows, err := q.db.QueryContext(ctx, getAllRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT id, description FROM roles WHERE id = ?
`

// Roles
func (q *Queries) GetRoleByID(ctx context.Context, id int64) (*Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByID, id)
	var i Role
	err := row.Scan(&i.ID, &i.Description)
	return &i, err
}

const insertRole = `-- name: InsertRole :exec
INSERT INTO roles (id, description) VALUES (?, ?)
`

type InsertRoleParams struct {
	ID          int64  `json:"id"`
	Description string `json:"description"`
}

func (q *Queries) InsertRole(ctx context.Context, arg InsertRoleParams) error {
	_, err := q.db.ExecContext(ctx, insertRole, arg.ID, arg.Description)
	return err
}

const updateRoleDescription = `-- name: UpdateRoleDescription :exec
UPDATE roles SET description = ? WHERE id = ?
`

type UpdateRoleDescriptionParams struct {
	Description string `json:"description"`
	ID          int64  `json:"id"`
}

func (q *Queries) UpdateRoleDescription(ctx context.Context, arg UpdateRoleDescriptionParams) error {
	_, err := q.db.ExecContext(ctx, updateRoleDescription, arg.Description, arg.ID)
	return err
}
