// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"
)

const deletePerson = `-- name: DeletePerson :exec
DELETE FROM person WHERE id = ?
`

func (q *Queries) DeletePerson(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePerson, id)
	return err
}

const getAllPersons = `-- name: GetAllPersons :many
SELECT id, name, role_id FROM person
`

func (q *Queries) GetAllPersons(ctx context.Context) ([]*Person, error) {
	rows, err := q.db.QueryContext(ctx, getAllPersons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(&i.ID, &i.Name, &i.RoleID); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPersonByID = `-- name: GetPersonByID :one
SELECT id, name, role_id FROM person WHERE id = ?
`

// Person
func (q *Queries) GetPersonByID(ctx context.Context, id int64) (*Person, error) {
	row := q.db.QueryRowContext(ctx, getPersonByID, id)
	var i Person
	err := row.Scan(&i.ID, &i.Name, &i.RoleID)
	return &i, err
}

const insertPerson = `-- name: InsertPerson :exec
INSERT INTO person (id, name, role_id) VALUES (?, ?, ?)
`

type InsertPersonParams struct {
	ID     int64         `json:"id"`
	Name   string        `json:"name"`
	RoleID sql.NullInt64 `json:"roleId"`
}

func (q *Queries) InsertPerson(ctx context.Context, arg InsertPersonParams) error {
	_, err := q.db.ExecContext(ctx, insertPerson, arg.ID, arg.Name, arg.RoleID)
	return err
}

const updatePerson = `-- name: UpdatePerson :exec
UPDATE person SET name = ?, role_id = ? WHERE id = ?
`

type UpdatePersonParams struct {
	Name   string        `json:"name"`
	RoleID sql.NullInt64 `json:"roleId"`
	ID     int64         `json:"id"`
}

func (q *Queries) UpdatePerson(ctx context.Context, arg UpdatePersonParams) error {
	_, err := q.db.ExecContext(ctx, updatePerson, arg.Name, arg.RoleID, arg.ID)
	return err
}
