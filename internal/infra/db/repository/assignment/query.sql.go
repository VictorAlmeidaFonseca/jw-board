// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package repository

import (
	"context"
	"database/sql"
)

const deleteAssignment = `-- name: DeleteAssignment :exec
DELETE FROM assignments WHERE id = ?
`

func (q *Queries) DeleteAssignment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAssignment, id)
	return err
}

const getAllAssignments = `-- name: GetAllAssignments :many
SELECT id, date_assignment, role_id, person_id FROM assignments
`

func (q *Queries) GetAllAssignments(ctx context.Context) ([]*Assignment, error) {
	rows, err := q.db.QueryContext(ctx, getAllAssignments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*Assignment
	for rows.Next() {
		var i Assignment
		if err := rows.Scan(
			&i.ID,
			&i.DateAssignment,
			&i.RoleID,
			&i.PersonID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAssignmentByID = `-- name: GetAssignmentByID :one
SELECT id, date_assignment, role_id, person_id FROM assignments WHERE id = ?
`

// Assignments
func (q *Queries) GetAssignmentByID(ctx context.Context, id int64) (*Assignment, error) {
	row := q.db.QueryRowContext(ctx, getAssignmentByID, id)
	var i Assignment
	err := row.Scan(
		&i.ID,
		&i.DateAssignment,
		&i.RoleID,
		&i.PersonID,
	)
	return &i, err
}

const insertAssignment = `-- name: InsertAssignment :exec
INSERT INTO assignments (id, role_id, person_id) VALUES (?, ?, ?)
`

type InsertAssignmentParams struct {
	ID       int64         `json:"id"`
	RoleID   sql.NullInt64 `json:"roleId"`
	PersonID sql.NullInt64 `json:"personId"`
}

func (q *Queries) InsertAssignment(ctx context.Context, arg InsertAssignmentParams) error {
	_, err := q.db.ExecContext(ctx, insertAssignment, arg.ID, arg.RoleID, arg.PersonID)
	return err
}

const updateAssignment = `-- name: UpdateAssignment :exec
UPDATE assignments SET role_id = ?, person_id = ? WHERE id = ?
`

type UpdateAssignmentParams struct {
	RoleID   sql.NullInt64 `json:"roleId"`
	PersonID sql.NullInt64 `json:"personId"`
	ID       int64         `json:"id"`
}

func (q *Queries) UpdateAssignment(ctx context.Context, arg UpdateAssignmentParams) error {
	_, err := q.db.ExecContext(ctx, updateAssignment, arg.RoleID, arg.PersonID, arg.ID)
	return err
}
